(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var Searcher = require('./searcher');

new Searcher('searcher');
},{"./searcher":3}],2:[function(require,module,exports){
'use strict';

module.exports = (function () {

    function Input(namespace, callback) {
        this.namespace = namespace;
        this.callback = callback;
    }

    Input.prototype.insert = function (value) {
        this.container = document.createElement('div');
        this.container.id = this.namespace + '-result';
        this.container.classList.add('result');
        this.input = document.createElement('input');
        this.input.id = this.namespace + '-input';
        this.input.classList.add('input');
        this.input.autofocus = true;
        this.input.value = value;
        this.button = document.createElement('button');
        this.button.id = this.namespace + '-button';
        this.button.classList.add('button');
        this.button.innerHTML = 'Close';
        this.time = document.createElement('span');
        this.time.id = this.namespace + '-time';
        this.time.classList.add('time');
        this.count = document.createElement('span');
        this.count.id = this.namespace + '-count';
        this.count.classList.add('count');
        this.container.appendChild(this.input);
        this.container.appendChild(this.button);
        this.container.appendChild(this.count);
        this.container.appendChild(this.time);
        document.body.insertBefore(this.container, document.body.firstChild);

        this.addListeners();

        return this;
    };

    Input.prototype.show = function (value) {

        if (!this.input) {
            this.insert(value);
        } else {
            this.input.value = value;
            this.container.style.display = 'block';
        }

        return this;
    };

    Input.prototype.hide = function () {
        this.container.style.display = 'none';

        return this;
    };

    Input.prototype.addListeners = function () {

        if (this.input) {
            this.input.addEventListener('input', this.callback, false);
        }

        if (this.button) {
            this.button.addEventListener('click', this.onClick.bind(this), false);
        }

        return this;
    };

    Input.prototype.onClick = function () {
        this.enable().hide();
        this.input.value = '';

        return this;
    };

    Input.prototype.setTime = function (time) {

        if (this.time) {
            this.time.innerHTML = time;
        }

        return this;
    };

    Input.prototype.setCount = function (count) {

        if (this.count) {
            this.count.innerHTML = count;
        }

        return this;
    };

    return Input;
})();
},{}],3:[function(require,module,exports){
'use strict';

var Input = require('./input');

module.exports = (function () {
    var START_LENGTH = 3,
        _isBusy = false;

    function Searcher(namespace) {
        this.namespace = namespace;
        this.container = document.getElementById(this.namespace + '-container');
        this.itemPrefix = this.namespace + '-container-item-';
        this.storage = [];
        this.time = {
            start: 0,
            end: 0
        };

        this.onLoad().addKeyListener();
    }

    Searcher.prototype.onLoad = function () {
        var i;

        if (this.container) {
            this.items = this.container.getElementsByTagName('*');

            for (i = this.items.length; i--;) {
                this.items[i].id = this.itemPrefix + i;
                this.storage[this.storage.length] = this.items[i].textContent;
            }
            this.binarySearch = new Worker('app/binary-search.js');
            this.input = new Input(this.namespace + '-input', this.onInput.bind(this));
            this.value = '';

            this.addWorkerListener();
        }

        return this;
    };

    Searcher.prototype.isAllowed = function () {
        return !_isBusy && this.value.length >= START_LENGTH;
    };

    Searcher.prototype.addKeyListener = function () {
        document.addEventListener('keypress', this.onKey.bind(this));

        return this;
    };

    Searcher.prototype.onKey = function (event) {

        if (!_isBusy) {
            if (this.value.length < START_LENGTH) {
                this.value += String.fromCharCode(event.keyCode || event.which);
            }

            if (this.isAllowed()) {
                this.show();
            }
        }

        return this;
    };

    Searcher.prototype.show = function () {

        if (this.input) {
            this.input.show(this.value);
        } else {
            this.insert(this.value);
        }
        this.search();

        return this;
    };

    Searcher.prototype.onInput = function (event) {
        this.value = event.target.value;

        this.search();

        return this;
    };

    Searcher.prototype.addWorkerListener = function () {
        this.binarySearch.addEventListener('message', this.onMessage.bind(this), false);

        return this;
    };

    Searcher.prototype.search = function () {

        if (this.isAllowed()) {
            this.time.start = performance.now();
            this.disable();
            this.binarySearch.postMessage({
                arr: this.storage,
                value: this.value
            });
        }

        return this;
    };

    Searcher.prototype.disable = function () {
        _isBusy = true;

        return this;
    };

    Searcher.prototype.enable = function () {
        _isBusy = false;

        return this;
    };

    Searcher.prototype.onMessage = function (event) {
        var i;

        this.time.end = performance.now();
        this.enable()
            .input.setTime(this.time.end - this.time.start).setCount(event.data.length);

        for (i = event.data.length; i--;) {
            document.getElementById(this.itemPrefix + event.data[i]).style.display = 'block';
        }

        return this;
    };

    return Searcher;
})();
},{"./input":2}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
